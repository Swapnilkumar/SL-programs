<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://www.icynorth.com/development/createdlltutorial.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Fog Creek CityDesk 2.0.25">
<meta name="citydesk" content="40DAC31F/22">
<title>
How to Create a Simple Win32 DLL
</title>
<link rel="stylesheet" type="text/css" href="./How to Create a Simple Win32 DLL_files/icynorthstyles.css">
</head>
<body>
<center>

<table cellspacing="0" cellpadding="4" width="785">
<tbody>
<tr>
	<td align="left" bgcolor="#C1C2E7" colspan="2">
	<img alt="Icy North Logo" src="./How to Create a Simple Win32 DLL_files/icynorth_2.gif" border="0" cd:pos="0">
</td>
</tr>
<tr>
	<td align="left" bgcolor="#004080" colspan="2">
	<span class="topbar">How to Create a Simple Win32 DLL</span>
	</td>
</tr>
<tr>
       <td valign="top" width="150">
		<br>
		
		<p>
		<b><a href="http://www.icynorth.com/index.html">Home</a></b><br>
		The place to start.
		</p>
		
		<p>
		<b><a href="http://www.icynorth.com/development/index.html">Development</a></b><br>
		Software development links, free utilities, source code, product reviews and more.
		</p>
		
		<p>
		<b><a href="http://www.icynorth.com/products/index.html">Products</a></b><br>
		Product information, downloads and purchasing information.
		</p>
		
		<p>
		<b><a href="http://www.icynorth.com/contact.html">Contact/About</a></b><br>
		Who's behind this site and how to contact them.
		</p>
		
		<p>
		<b><a href="http://www.icynorth.com/news/index.html">What's New</a></b><br>
		All of the latest&nbsp;news and articles.
		</p>
		
		<p><b><a href="http://www.icynorth.com/forums">Community</a></b><br>
		An open forum to discuss Icy North products or site content.
		</p>
		<p><b><a href="http://www.kapilik.com/">Brett's Blog</a></b><br>
		Come visit my blog. Who knows - you might like it.
		</p>
		<br>
	</td>
       <td valign="top"><br>
<script type="text/javascript">
//<![CDATA[
<!--
google_ad_client = "pub-8520849211916637";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text_image";
//2006-11-07: DLL Tutorial Page
google_ad_channel = "8644138088";
//-->//]]>
</script>
<script src="./How to Create a Simple Win32 DLL_files/show_ads.js" type="text/javascript">
</script><script src="./How to Create a Simple Win32 DLL_files/show_ads_impl.js"></script><script src="./How to Create a Simple Win32 DLL_files/expansion_embed.js"></script><script src="./How to Create a Simple Win32 DLL_files/test_domain.js"></script><script>google_protectAndRun("ads_core.google_render_ad", google_handleError, google_render_ad);</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="google_ads_frame1_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" frameborder="0" height="60" hspace="0" id="google_ads_frame1" marginheight="0" marginwidth="0" name="google_ads_frame" scrolling="no" src="./How to Create a Simple Win32 DLL_files/ads.htm" style="left:0;position:absolute;top:0" vspace="0" width="468"></iframe></ins></ins>

<p><b>UPDATE:</b> This article uses Visual C++ 6.0. I have published an updated version of the article that uses Visual C++ 2005 here: <a href="http://www.kapilik.com/2007/09/17/how-to-create-a-simple-win32-dll-using-visual-c-2005/">How to Create a Simple Win32 DLL Using Visual C++ 2005</a>.</p>

<h1>Introduction</h1>
<p>This tutorial will teach you how to use Visual C++ 6.0 to create a small DLL that can be called from C++, Visual Basic, Delphi or any other program capable at calling DLL functions.&nbsp;Specifically, we will look at how to call the DLL function from <a href="http://www.indigorose.com/" target="_blank">Indigo Rose development tools</a>.</p>
<p>This DLL will have one purpose; to generate a unique filename using the Windows API function <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/gettempfilename.asp" target="_blank">GetTempFileName</a>.&nbsp;This function is useful if you need to store temporary data in a unique file for the user of your application and want to ensure that the file does not already exist. However, the point of this tutorial is not to generate unique filenames, but rather to show you how easy it is to create simple Windows DLLs using Visual C++.</p>
<p>The key here is "simple".&nbsp;Windows DLLs are capable of much, much more than outlined here.&nbsp;This tutorial will only cover simple, Win32 DLL creation for those quick-and-dirty projects.</p>
<h1>Create&nbsp;the&nbsp;Project</h1>
<p>The first step is to start Visual C++ and create our DLL project.</p>
<p><strong>1) Start Visual C++ and choose File | New from the menu.</strong></p>
<p>This will open the <strong>New</strong> dialog.&nbsp;This is the starting point for creating all kinds of projects.&nbsp;Make sure that you are on the "Projects" tab.</p>
<p><strong>2) Select "Win32 Dynamic-Link Library" as the project type and name the project "MakeTempFilenameDLL".</strong></p>
<p>We want to create a Win32 DLL, not a MFC DLL.&nbsp;MFC-based DLLs can also be very useful and offer a lot more functionality, however they require the overhead of the MFC library DLLs (over 1 MB) just to get started. That is too much overhead for our simple DLL needs.</p>
<p><span><img height="407" alt="New Project Dialog" hspace="4" src="./How to Create a Simple Win32 DLL_files/new_project_dlg.jpg" width="561" align="left" border="0" cd:pos="2"><br clear="all"></span><span></span></p>
<p><span></span></p>
<p><span>So, the New dialog should now look something like the one above.&nbsp;Click <strong>OK</strong> to continue to the next step.</span></p>
<p><span><strong>3) Choose "A simple DLL project." and click Finish.</strong></span></p>
<p><span>The next screen you will see looks like this:</span></p>
<p><span><img height="391" alt="Choose DLL Project Type" hspace="4" src="./How to Create a Simple Win32 DLL_files/new_project_dlg_type.jpg" width="477" align="left" border="0" cd:pos="2"><br clear="all"></span></p>
<p><span></span></p>
<p><span>For this project, we will just start with a simple DLL. After you click the <strong>Finish</strong> button, you will see the <strong>New Project Information</strong> dialog which summarizes your settings.&nbsp;Click <strong>OK</strong> to complete the project creation.&nbsp;Your new project will now be ready to work on from the Visual C++ design environment. At this point, your project will compile and your DLL can be created, however it will not do anything because we have not created and exported any functions yet.&nbsp;That is the next step.</span></p>
<h1>Add the Function</h1>
<p>The next step is to actually add the function to the DLL that we want to be able to call from other programs.</p>
<p><strong>1) Open the "MakeTempFilenameDLL.cpp" file for editing.</strong></p>
<p>Select the <strong>FileView</strong> tab on the Workspace bar. Then open the <strong>Source Files</strong> folder. Now double-click on the "MakeTempFilenameDLL.cpp" file.&nbsp;You will now be able to edit the file.</p>
<p><strong>2) Add the "RetrieveTempFilename" function.</strong></p>
<p>Next we want to add the actual code for the function. Our function will be called "RetrieveTempFilename".&nbsp;It will accept two string arguments. The first is "szDirectory" which is the directory that we want to generate the unique filename in. The second argument, "szPrefix" is a string that will be the prefix of the temporary filename. The "GetTempFileName" API function will use the first three characters of this string when generating the unique filename. The function will return the unique filename if successful, or the string "ERROR" if it fails.</p>
<p>Because we want to return a string, we need to make the returned string a global variable.&nbsp;This is necessary because if we declare the string inside of the function it will be destroyed when the function is finished.&nbsp;We need to create a string that will last for the life of the DLL.</p>
<p>Your global string declaration and function should look like this:</p>
<p><code>char szReturn[MAX_PATH];</code></p>
<p><code>__declspec(dllexport) LPCTSTR RetrieveTempFilename(LPCTSTR szDirectory, LPCTSTR szPrefix)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp; char szBuffer[MAX_PATH];<br>
&nbsp;&nbsp;&nbsp;&nbsp; if(GetTempFileName(szDirectory,szPrefix,0,szBuffer) == 0)<br>
&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // It failed - return the string "ERROR"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lstrcpy(szReturn,"ERROR");<br>
&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Success!<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lstrcpy(szReturn,szBuffer);<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; return szReturn;<br>
}</code></p>
<p>You can copy and paste the code above right into your file below the "DllMain" function. If you build your project now it will compile successfully but the function will still not be callable from outside programs.&nbsp;That is because the Visual C++ compiler "decorates" the function names so that they would not be recognizable to the calling program. Although there are several ways around this problem, we will use an "Export.def" file.</p>
<h1>Add an "Export.def" File</h1>
<p>Adding an Export.def file will allow us to tell the compiler the proper names of our DLL functions that should be exposed.</p>
<p><strong>1) Add a new text file to your project called "Export.def"</strong></p>
<p>Choose <strong>File | New</strong> from the menu within Visual C++ and select the Files tab. Select "Text File" as the file type and type in "Export.def" as the filename. Click <strong>OK</strong> to create the file.</p>
<p><span><img height="407" alt="Create Export.def file" hspace="4" src="./How to Create a Simple Win32 DLL_files/addexportdef.jpg" width="561" align="left" border="0" cd:pos="2"><br clear="all"></span>&nbsp;</p>
<p><strong>2) Add the "LIBRARY" and "EXPORTS" sections to the "Export.def" file.</strong></p>
<p>All that we need to do now is to add a few sections to the "Export.def:" file and we will be in business. The first section is the "LIBRARY" declaration with our DLL name. The second is the "EXPORTS" section which declares our exported functions.</p>
<p><code>LIBRARY MakeTempFilenameDLL<br>
EXPORTS<br>
&nbsp;&nbsp;&nbsp;&nbsp; RetrieveTempFilename</code></p>
<p>Copy and paste the above lines into the "Export.def" file. Now you can build your project. First of all, make sure you are building the "Release" build by selecting <strong>Build | Select Active Configuration</strong>, choosing "MakeTempFilenameDLL - Win32 Release" and clicking <strong>OK</strong>. Then just hit <strong>F7</strong> to build the DLL. It should compile and link with no troubles.</p>
<h1>Using the DLL from Indigo Rose Tools</h1>
<p>At this point you have a fully-functional DLL that can be called from Visual Basic, another C++ application or any other program capable of loading can calling DLL functions. Here we will focus on how to call our new function from any of the Indigo Rose development tools that use the Lua scripting language.</p>
<p>The first step will be to put the DLL somewhere that the runtime engine can find it.&nbsp; In the case of Setup Factory or Visual Patch include it as a primer file and call it like this:</p>
<code>local strDLLPath = SessionVar.Expand("%TempLaunchFolder%\\MakeTempFilenameDLL.dll");<br>
local strTempFilename = DLL.CallFunction(strDLLPath,"RetrieveTempFilename","\"".._TempFolder.."\",\"tst\"",<br>
&nbsp;&nbsp;&nbsp;&nbsp;DLL_RETURN_TYPE_STRING,DLL_CALL_CDECL);<br>
Dialog.Message("Temp Filename",strTempFilename);</code>
<p>In the case of the other products, simply adjust the strDLLPath variable accordingly.</p>
<p><span></span></p>
<h1>Conclusion</h1>
<p><span></span>This tutorial has brought you through the process of creating a simple Win32 DLL using Visual C++ and calling a DLL function from one of the Indigo Rose development tools. Of course, in the real world your DLL functions will be more complicated and useful, I hope that this tutorial has put you on the right track.</p>
<p><span></span>I have prepared a downloadable zip file for you that contains the Visual C++ project and the finished DLL.</p>
<p><a href="http://www.icynorth.com/files/MakeTempFilenameDLL.zip">Click here to download MakeTempFilenameDLL.zip (29 KB)</a></p><br></td>
</tr>
<tr>
	<td align="left" bgcolor="#004080" colspan="2">
	<span class="bottombar">
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/index.html">Home</a> - 		
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/development/index.html">Development</a> - 		
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/products/index.html">Products</a> - 		
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/contact.html">Contact/About</a> - 		
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/news/index.html">What's New</a> - 		
		
		<a style="COLOR: #ffffff" href="http://www.icynorth.com/forums">Community</a> - 
		<a style="COLOR: #ffffff" href="http://www.kapilik.com/">Brett's Blog</a>
	</span>
	</td>
</tr>
</tbody>
</table>
<p>
<span style="COLOR: #c0c0c0">
Copyright © 2007 Icy North Technologies<br>
</span>
<a style="COLOR: #c0c0c0; FONT-FAMILY: verdana" href="mailto:info@icynorth.com">info@icynorth.com</a>
</p>
</center>
<script src="./How to Create a Simple Win32 DLL_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-617121-1";
urchinTracker();
</script>


</body></html>