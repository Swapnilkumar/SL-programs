(defun main()
	(princ "Enter row:")
	(setq m (read))
	(princ "Enter col:")
	(setq n (read))
	(setq mat1 (make-array (* m n)))
	(setq mat2 (make-array (* m n)))
	(princ "Enter 1st mat")
	(dotimes (i (* m n))
		(setf (aref mat1 i) (read))
	)
	(print mat1)
	(princ "Enter 2nd mat")
	(dotimes (i (* m n))
		(setf (aref mat2 i) (read))
	)
	(print mat2)
	(princ "Enter Choice:")
	(princ "1. Addition")
	(princ "2. Multiplication")
	(princ "3. Transpose")
	(princ "4. Exit")
	(setq ch (read))
	(case ch
		(1 (add))
		(2 (mul))
		(3 (tra))
		(4 (dos "pause")
		   (exit))
	)
	(main)
)

(defun add()
	(princ "addition is:")
	(setq add (make-array (* m n)))
	(dotimes (i m)
		(dotimes (j n)
			(setf (aref add (+ (* i n) j)) (+ (aref mat1 (+ (* i n) j)) (aref mat2 (+ (* i n) j))))
		)
	)
	(print add)
)
(defun mul()
	(princ "Multiplication is:")
)
(defun tra()
	(princ "Transpose is:")
	(dotimes (j n)
		(dotimes (i m)
			(princ (aref mat1 (+ (* i n) j)))
			(princ " ")
		)
		(princ "\n")
	)
)
(main)